[ { "header": "Split", "tactic": "Wp.split", "params": {},
    "select": { "select": "inside-goal", "occur": 0,
                "target": "Mint_0[(shiftfield_F1_row (shift___anonstruct_coo_1 mat_0 (mat_length_0-1)))]<\n(to_uint32 (i_2-1))",
                "pattern": "<[]to_uint32$Mintshiftfield_F1_row" },
    "children": { "Lt": [ { "prover": "alt-ergo", "verdict": "valid",
                            "time": 0.1096, "steps": 399 } ],
                  "Eq": [ { "header": "Cut", "tactic": "Wp.cut",
                            "params": { "case": "MODUS",
                                        "clause": { "select": "inside-step",
                                                    "at": 10, "kind": "have",
                                                    "occur": 0,
                                                    "target": "Mint_0[(shiftfield_F1_row (shift___anonstruct_coo_1 mat_0 (mat_length_0-1)))]<\ni_2",
                                                    "pattern": "<[]$i$Mintshiftfield_F1_rowshift___anonstruct_coo_1" } },
                            "select": { "select": "inside-step", "at": 10,
                                        "kind": "have", "occur": 0,
                                        "target": "Mint_0[(shiftfield_F1_row (shift___anonstruct_coo_1 mat_0 (mat_length_0-1)))]<\ni_2",
                                        "pattern": "<[]$i$Mintshiftfield_F1_rowshift___anonstruct_coo_1" },
                            "children": { "Clause": [ { "prover": "alt-ergo",
                                                        "verdict": "valid",
                                                        "time": 0.029,
                                                        "steps": 149 } ],
                                          "Assume": [ { "header": "Definition",
                                                        "tactic": "Wp.unfold",
                                                        "params": {},
                                                        "select": { "select": "inside-goal",
                                                                    "occur": 0,
                                                                    "target": "let a_0 = (shift___anonstruct_coo_1 mat_0 (mat_length_0-1)) in\n(L_l_vec_mult Mint_0 vec_0 mat_0 Mint_0[(shiftfield_F1_row a_0)] length_0\n  Mint_0[(shiftfield_F1_col a_0)] 0 mat_length_0)",
                                                                    "pattern": "L_l_vec_mult$Mint$vec$mat[]$length" },
                                                        "children": { "Unfold 'L_l_vec_mult'": 
                                                                    [ { "header": "Definition",
                                                                    "tactic": "Wp.unfold",
                                                                    "params": {},
                                                                    "select": 
                                                                    { "select": "inside-goal",
                                                                    "occur": 0,
                                                                    "target": "let x_0 = (mat_length_0-1) in\nlet a_0 = (shift___anonstruct_coo_1 mat_0 x_0) in\n(L_l_vec_mult Mint_0 vec_0 mat_0 Mint_0[(shiftfield_F1_row a_0)] length_0\n  Mint_0[(shiftfield_F1_col a_0)] 0 x_0)",
                                                                    "pattern": "L_l_vec_mult$Mint$vec$mat[]$length" },
                                                                    "children": 
                                                                    { "Unfold 'L_l_vec_mult'": 
                                                                    [ { "header": "Cut",
                                                                    "tactic": "Wp.cut",
                                                                    "params": 
                                                                    { "case": "MODUS",
                                                                    "clause": 
                                                                    { "select": "compose",
                                                                    "id": "wp:eq",
                                                                    "args": 
                                                                    [ { "select": "inside-goal",
                                                                    "occur": 0,
                                                                    "target": "let x_0 = (mat_length_0-1) in\nlet a_0 = (shift___anonstruct_coo_1 mat_0 x_0) in\n(L_coeff Mint_0 mat_0 0 x_0 Mint_0[(shiftfield_F1_row a_0)]\n  Mint_0[(shiftfield_F1_col a_0)])",
                                                                    "pattern": "L_coeff$Mint$mat0+[][]-1$mat_length" },
                                                                    { "select": "kint",
                                                                    "val": "0" } ] } },
                                                                    "select": null,
                                                                    "children": 
                                                                    { "Clause": 
                                                                    [ { "prover": "alt-ergo",
                                                                    "verdict": "valid",
                                                                    "time": 0.0248,
                                                                    "steps": 62 } ],
                                                                    "Assume": 
                                                                    [ { "prover": "alt-ergo",
                                                                    "verdict": "valid",
                                                                    "time": 0.0274,
                                                                    "steps": 168 } ] } } ] } } ] } } ] } } ],
                  "Gt": [ { "header": "Cut", "tactic": "Wp.cut",
                            "params": { "case": "MODUS",
                                        "clause": { "select": "compose",
                                                    "id": "wp:leq",
                                                    "args": [ { "select": "inside-step",
                                                                "at": 10,
                                                                "kind": "have",
                                                                "occur": 0,
                                                                "target": "i_2",
                                                                "pattern": "$i" },
                                                              { "select": "inside-step",
                                                                "at": 10,
                                                                "kind": "have",
                                                                "occur": 0,
                                                                "target": "Mint_0[(shiftfield_F1_row (shift___anonstruct_coo_1 mat_0 (mat_length_0-1)))]",
                                                                "pattern": "[]$Mintshiftfield_F1_rowshift___anonstruct_coo_1" } ] } },
                            "select": null,
                            "children": { "Clause": [ { "prover": "alt-ergo",
                                                        "verdict": "valid",
                                                        "time": 0.0309,
                                                        "steps": 149 } ],
                                          "Assume": [ { "header": "Definition",
                                                        "tactic": "Wp.unfold",
                                                        "params": {},
                                                        "select": { "select": "inside-goal",
                                                                    "occur": 1,
                                                                    "target": "let x_0 = (mat_length_0-1) in\n(L_l_vec_mult Mint_0 vec_0 mat_0 (to_uint32 (i_2-1)) length_0\n  Mint_0[(shiftfield_F1_col (shift___anonstruct_coo_1 mat_0 x_0))] 0 x_0)",
                                                                    "pattern": "L_l_vec_mult$Mint$vec$matto_uint32" },
                                                        "children": { "Unfold 'L_l_vec_mult'": 
                                                                    [ { "header": "Definition",
                                                                    "tactic": "Wp.unfold",
                                                                    "params": {},
                                                                    "select": 
                                                                    { "select": "inside-goal",
                                                                    "occur": 0,
                                                                    "target": "(L_l_vec_mult Mint_0 vec_0 mat_0 (to_uint32 (i_2-1)) length_0\n  Mint_0\n    [(shiftfield_F1_col (shift___anonstruct_coo_1 mat_0 (mat_length_0-1)))] 0\n  mat_length_0)",
                                                                    "pattern": "L_l_vec_mult$Mint$vec$matto_uint32" },
                                                                    "children": 
                                                                    { "Unfold 'L_l_vec_mult'": 
                                                                    [ { "header": "Cut",
                                                                    "tactic": "Wp.cut",
                                                                    "params": 
                                                                    { "case": "MODUS",
                                                                    "clause": 
                                                                    { "select": "compose",
                                                                    "id": "wp:not",
                                                                    "args": 
                                                                    [ { "select": "inside-goal",
                                                                    "occur": 0,
                                                                    "target": "(to_uint32 (i_2-1))=length_0",
                                                                    "pattern": "=to_uint32$length+-1$i" } ] } },
                                                                    "select": null,
                                                                    "children": 
                                                                    { "Clause": 
                                                                    [ { "prover": "alt-ergo",
                                                                    "verdict": "valid",
                                                                    "time": 0.0201,
                                                                    "steps": 16 } ],
                                                                    "Assume": 
                                                                    [ { "header": "Cut",
                                                                    "tactic": "Wp.cut",
                                                                    "params": 
                                                                    { "case": "MODUS",
                                                                    "clause": 
                                                                    { "select": "compose",
                                                                    "id": "wp:eq",
                                                                    "args": 
                                                                    [ { "select": "inside-goal",
                                                                    "occur": 0,
                                                                    "target": "let x_0 = (mat_length_0-1) in\n(L_coeff Mint_0 mat_0 0 x_0 (to_uint32 (i_2-1))\n  Mint_0[(shiftfield_F1_col (shift___anonstruct_coo_1 mat_0 x_0))])",
                                                                    "pattern": "L_coeff$Mint$mat0+to_uint32[]-1$mat_length" },
                                                                    { "select": "inside-goal",
                                                                    "occur": 0,
                                                                    "target": "(L_coeff Mint_0 mat_0 0 mat_length_0 (to_uint32 (i_2-1))\n  Mint_0\n    [(shiftfield_F1_col (shift___anonstruct_coo_1 mat_0 (mat_length_0-1)))])",
                                                                    "pattern": "L_coeff$Mint$mat0$mat_lengthto_uint32" } ] } },
                                                                    "select": null,
                                                                    "children": 
                                                                    { "Clause": 
                                                                    [ { "prover": "alt-ergo",
                                                                    "verdict": "valid",
                                                                    "time": 0.0288,
                                                                    "steps": 64 } ],
                                                                    "Assume": 
                                                                    [ { "prover": "alt-ergo",
                                                                    "verdict": "valid",
                                                                    "time": 0.0361,
                                                                    "steps": 174 } ] } } ] } } ] } } ] } } ] } } ] } } ]
