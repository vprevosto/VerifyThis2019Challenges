[ { "header": "Definition", "tactic": "Wp.unfold", "params": {},
    "select": { "select": "clause-goal",
                "target": "let a_0 = (havoc Mint_undef_0 Mint_11 (shift_sint32 out_2 0) i_2) in\nlet a_1 = (shift___anonstruct_coo_1 mat_0 i_7) in\nlet a_2 = (shift_sint32 out_2 a_0[(shiftfield_F1_col a_1)]) in\n(P_well_formed\n  a_0[a_2\n    ->(to_sint32\n        ((to_sint32\n           (a_0[(shiftfield_F1_v a_1)]*\n            a_0[(shift_sint32 vec_0 a_0[(shiftfield_F1_row a_1)])]))+\n         a_0[a_2]))] mat_0 (to_uint32 (1+i_7)) i_2)",
                "pattern": "P_well_formed[=]$matto_uint32$ihavoc" },
    "children": { "Unfold 'P_well_formed'": [ { "header": "Definition",
                                                "tactic": "Wp.unfold",
                                                "params": {},
                                                "select": { "select": "inside-step",
                                                            "at": 3,
                                                            "kind": "have",
                                                            "occur": 0,
                                                            "target": "(P_well_formed Mint_11 mat_0 mat_length_0 length_2)",
                                                            "pattern": "P_well_formed$Mint$mat$mat_length" },
                                                "children": { "Unfold 'P_well_formed'": 
                                                                [ { "header": "Split",
                                                                    "tactic": "Wp.split",
                                                                    "params": {},
                                                                    "select": 
                                                                    { "select": "clause-goal",
                                                                    "target": "let a_0 = (havoc Mint_undef_0 Mint_11 (shift_sint32 out_2 0) i_2) in\nlet a_1 = (shift___anonstruct_coo_1 mat_0 i_7) in\nlet a_2 = (shift_sint32 out_2 a_0[(shiftfield_F1_col a_1)]) in\nlet a_3 =\n    a_0[a_2\n      ->(to_sint32\n          ((to_sint32\n             (a_0[(shiftfield_F1_v a_1)]*\n              a_0[(shift_sint32 vec_0 a_0[(shiftfield_F1_row a_1)])]))+\n           a_0[a_2]))] in\nlet x_0 = (to_uint32 (1+i_7)) in\n(P_well_sorted a_3 mat_0 x_0) /\\ (P_non_zero_coeff a_3 mat_0 x_0)\n/\\ (P_well_dimensioned a_3 mat_0 x_0 i_2)",
                                                                    "pattern": "&P_well_sortedP_non_zero_coeffP_well_dimensioned" },
                                                                    "children": 
                                                                    { "Goal 1/3": 
                                                                    [ { "header": "Definition",
                                                                    "tactic": "Wp.unfold",
                                                                    "params": {},
                                                                    "select": 
                                                                    { "select": "clause-goal",
                                                                    "target": "let a_0 = (havoc Mint_undef_0 Mint_11 (shift_sint32 out_2 0) i_2) in\nlet a_1 = (shift___anonstruct_coo_1 mat_0 i_7) in\nlet a_2 = (shift_sint32 out_2 a_0[(shiftfield_F1_col a_1)]) in\n(P_well_sorted\n  a_0[a_2\n    ->(to_sint32\n        ((to_sint32\n           (a_0[(shiftfield_F1_v a_1)]*\n            a_0[(shift_sint32 vec_0 a_0[(shiftfield_F1_row a_1)])]))+\n         a_0[a_2]))] mat_0 (to_uint32 (1+i_7)))",
                                                                    "pattern": "P_well_sorted[=]$matto_uint32havoc" },
                                                                    "children": 
                                                                    { "Unfold 'P_well_sorted'": 
                                                                    [ { "prover": "alt-ergo",
                                                                    "verdict": "valid",
                                                                    "time": 3.7721,
                                                                    "steps": 4223 } ] } } ],
                                                                    "Goal 2/3": 
                                                                    [ { "prover": "alt-ergo",
                                                                    "verdict": "valid",
                                                                    "time": 2.7502,
                                                                    "steps": 2155 } ],
                                                                    "Goal 3/3": 
                                                                    [ { "prover": "alt-ergo",
                                                                    "verdict": "valid",
                                                                    "time": 7.5002,
                                                                    "steps": 9831 } ] } } ] } } ] } } ]
